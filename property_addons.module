<?php
/**
 * Property property_addons
 * Adds a custom CCK widget for property property_addons, and allows for full views integration
 */

define( "PROPERTY_ADDONS_MODULE_PATH", drupal_get_path( 'module', 'property_addons' ) );

/**
 * Hook Init
 */
function property_addons_init() { //load js calendar listener
  
  drupal_add_js( PROPERTY_ADDONS_MODULE_PATH. '/js/functions.propertyAddons.js','module','header' );
  
  error_reporting(E_ALL);
  ini_set('display_errors', TRUE);
  ini_set('display_startup_errors', TRUE);

  
}

/**
 * Hook Theme
 */
function property_addons_theme() {
	
	return array (
    //Module Theme via tpl
		'property_addons_display' => array (
      'path'      => PROPERTY_ADDONS_MODULE_PATH,
      'template'  => 'theme/property_addons_display',
			'arguments' => array(
        'property_addons_display'=> NULL,
        'promotional_teaser'=> NULL,
        'promotional_details'=> NULL,
        'property_is_for_sale'=> NULL,
        'property_is_featured'=> NULL,
        'property_is_featured_price_point'=> NULL
      )
		),
    //CCK theme formatters.
    'property_addons_formatter_default' => array(
      'arguments' => array( 'element' => NULL )
    ),
    'property_addons' => array(
      'arguments' => array( 'element' => NULL )
    )
	);
	
}

//==========================================//
// CONTENT FIELD WIDGET (CCK)
//==========================================//

/**
 * Implementation of hook_field_info().
 */
function property_addons_field_info() {
  
  return array(
    'property_addons' => array(
      'label'       => t('Property Add-Ons Field'),
      'description' => t('Stores a compound field that has the Add On fields for a partiulcar properties additional costs.')
    )
  );
  
}

/**
 * Implementation of hook_field_settings().
 */
function property_addons_field_settings( $op, $field ) {
  
  switch ( $op ) {
    
    case 'form':
      
      //krumo( $field );
      $form = array();
      
      //Override the option to make more than one field, this can only be one widget
      $form['multiple'] = array(
        '#type'    => 'select',
        '#title'   => t( 'Number of values' ),
        '#options' => array( 0 => t('Only One Value Is allowed for this field') )
      );
      
      //Special Offers
      $form['property_is_on_promotion'] = array(
        '#tree' => TRUE,
        '#weight' => -100,
        '#prefix' => t( '!msg', array( '!msg' => '<h3>Property Is On Special: Settings and Information</h3>' ) )
      );
      
      $form['property_is_on_promotion']['price_point'] = array(
        '#type'          => 'textfield',
        '#title'         => t( 'Special Offers Price Point' ),
        '#default_value' => isset( $field['property_is_on_promotion']['price_point'] ) ? $field['property_is_on_promotion']['price_point']  : '',
        '#required'      => TRUE,
        '#description'   => t( 'Please Enter in the Price Point for Special offers, in the form $nn.nn. eg: $25.00' )
      );
      
      $form['property_is_on_promotion']['details'] = array(
        '#type'          => 'textarea',
        '#title'         => t( 'Special Offers Details' ),
        '#default_value' => isset( $field['property_is_on_promotion']['details'] ) ? $field['property_is_on_promotion']['details']  : '',
        '#required'      => TRUE,
        '#rows'          => 5,
        '#description'   => t( 'Please enter the Details for Special Offers, if you need to change this in the future, you can do this here. You may enter HTML into this area to format it.' )
      );
      
      //On Sale
      $form['property_is_on_sale'] = array(
        '#tree' => TRUE,
        '#weight' => -99,
        '#prefix' => t( '!msg', array( '!msg' => '<h3>Property Is For Sale: Settings and Information</h3>' ) )
      );
      
      $form['property_is_on_sale']['price_point'] = array(
        '#type'          => 'textfield',
        '#title'         => t( 'For Sale Price Point' ),
        '#default_value' => isset( $field['property_is_on_promotion']['price_point'] ) ? $field['property_is_on_promotion']['price_point']  : '',
        '#required'      => TRUE,
        '#description'   => t( 'Please Enter in the Price Point for Special offers, in the form $nn.nn. eg: $25.00' )
      );
      
      $form['property_is_on_sale']['details'] = array(
        '#type'          => 'textarea',
        '#title'         => t( 'For Sale Details' ),
        '#default_value' => isset( $field['property_is_on_sale']['details'] ) ? $field['property_is_on_sale']['details']  : '',
        '#required'      => TRUE,
        '#rows'          => 5,
        '#description'   => t( 'Please enter the Details for On Sale Properties, if you need to change this in the future, you can do this here. You may enter HTML into this area to format it.' )
      );
      
      //Featured Property
      $form['property_is_featured'] = array(
        '#tree' => TRUE,
        '#weight' => -98,
        '#prefix' => t( '!msg', array( '!msg' => '<h3>Featured Property: Settings and Information</h3>' ) )
      );
      
      $options = array(
        '1month|1 month for $25.00',
        '2months|2 months for $45.00',
        '3months|3 months for $60.00 (Best Value)'
      );
      $form['property_is_featured']['price_point'] = array(
        '#type'          => 'textarea',
        '#title'         => t( 'Featured Property Price Point' ),
        '#default_value' => isset( $field['property_is_featured']['price_point'] ) ? $field['property_is_featured']['price_point']  : implode( "\r\n", $options ),
        '#required'      => TRUE,
        '#description'   => t( 'Please Enter in the Price Point for Special offers, in the form Key|Information. Please separate Price Points by a new line, and do not use any spaces between characters for the Key. This will show up as a select list for the end-user. Eg: !options If you are unsure how to proceed, please contact the manager of this site.',
                              array( '!options' => "<br />" .implode( "<br />", $options ) ."<br />" ) )
      );
      
      $form['property_is_featured']['details'] = array(
        '#type'          => 'textarea',
        '#title'         => t( 'Featured Property Details' ),
        '#default_value' => isset( $field['property_is_featured']['details'] ) ? $field['property_is_featured']['details']  : '',
        '#required'      => TRUE,
        '#rows'          => 5,
        '#description'   => t( 'Please enter the Details for Properties that are Featured, if you need to change this in the future, you can do this here. You may enter HTML into this area to format it.' )
      );
      
      return $form;
    
    case 'save':
      return array(
        'property_is_on_promotion',
        'property_is_on_sale',
        'property_is_featured'
      );
    
    case 'database columns':
      return array(
        'property_is_on_promotion'         => array( 'type' => 'varchar', 'length' => 255, 'not null' => FALSE, 'sortable' => FALSE, 'views' => FALSE ),
        'promotional_teaser'               => array( 'type' => 'varchar', 'length' => 255, 'not null' => FALSE, 'sortable' => FALSE, 'views' => FALSE ),
        'promotional_details'              => array( 'type' => 'varchar', 'length' => 255, 'not null' => FALSE, 'sortable' => FALSE, 'views' => FALSE ),
        'property_is_for_sale'             => array( 'type' => 'varchar', 'length' => 255, 'not null' => FALSE, 'sortable' => FALSE, 'views' => FALSE ),
        'property_is_featured'             => array( 'type' => 'varchar', 'length' => 255, 'not null' => FALSE, 'sortable' => FALSE, 'views' => FALSE ),
        'property_is_featured_price_point' => array( 'type' => 'varchar', 'length' => 255, 'not null' => FALSE, 'sortable' => FALSE, 'views' => FALSE )
      );

  }
  
}

/**
 * Implementation of hook_content_is_empty().
 */
function property_addons_content_is_empty( $item, $field ) {
  
  //krumo( $item );
  
  if ( empty( $element['#item']['property_is_on_promotion'] ) && empty( $element['#item']['property_is_for_sale'] ) && empty( $element['#item']['property_is_featured'] ) ) {
    
    return TRUE;
  
  }
  
  return FALSE;

}

/**
 * Implementation of hook_field_formatter_info().
 */
function property_addons_field_formatter_info() {
  
  return array(
    'default' => array(
      'label'           => t('Default'),
      'field types'     => array('property_addons'),
      'multiple values' => CONTENT_HANDLE_CORE
    )
  );
  
}

/**
 * Theme function for 'default' example field formatter.
 *
 * $element['#item']: the sanitized $delta value for the item,
 * $element['#field_name']: the field name,
 * $element['#type_name']: the $node->type,
 * $element['#formatter']: the $formatter_name,
 * $element'#node']: the $node,
 * $element['#delta']: the delta of this item, like '0',
 *
 */
function theme_property_addons_formatter_default( $element ) {
  
  if ( !empty( $element['#item']['property_is_on_promotion'] ) || !empty( $element['#item']['property_is_for_sale'] ) || !empty( $element['#item']['property_is_featured'] ) ) { //If we don't have a legitimate addon, then don't do it!
    
    
    if ( $element['#item']['property_is_featured'] == 1 ) {
      
      $pricePoint = explode( $element['#item']['property_is_featured_price_point'] );
      
    }
    
    return theme( 'property_addons_display',
                 $element['#item']['property_is_on_promotion'],
                 $element['#item']['promotional_teaser'],
                 $element['#item']['promotional_details'],
                 $element['#item']['property_is_for_sale'],
                 $element['#item']['property_is_featured'],
                 $pricePoint );
    
  }

}

/**
 * FAPI theme for an individual widget from the individual element.
 * @internal Crazy thing is, I can't theme out this form in a tpl file.
 */
function theme_property_addons( $element ) {
  
  //krumo( $element );
  
  $output = '<div class="property_addons-widget">';
  $output .= '<h4>Place Your Property On Special!</h4>';
  $output .= theme( 'checkbox', $element['property_is_on_promotion'] );
  $output .= theme( 'textfield', $element['promotional_teaser'] );
  $output .= theme( 'textarea', $element['promotional_details'] );
  $output .= t( '!MSG', array( '!MSG' => $element['#field']['property_is_on_promotion']['details'] ) ) ;
  $output .= '<h4>Set Your Property For Sale!</h4>';
  $output .= theme( 'checkbox', $element['property_is_for_sale'] );
  $output .= t( '!MSG', array( '!MSG' => $element['#field']['property_is_on_sale']['details'] ) ) ;
  $output .= '<h4>Feature Your Property On Our Site!</h4>';
  $output .= theme( 'checkbox', $element['property_is_featured'] );
  $output .= theme( 'radios', $element['property_is_featured_price_point'] );
  $output .= t( '!MSG', array( '!MSG' => $element['#field']['property_is_featured']['details'] ) ) ;
  $output .= '</div>';

  return $output;

}

/**
 * Implementation of FAPI hook_elements().
 *
 * Any FAPI callbacks needed for individual widgets can be declared here,
 * and the element will be passed to those callbacks for processing.
 *
 * Drupal will automatically theme the element using a theme with
 * the same name as the hook_elements key.
 *
 * Autocomplete_path is not used by text_widget but other widgets can use it
 * (see nodereference and userreference).
 */
function property_addons_elements() {
  
  $elements = array(
    'property_addons' => array(
      '#input'   => TRUE,
      '#process' => array('property_addons_process')
    )
  );
  
  return $elements;

}

/**
 * Implementation of hook_widget_info().
 *
 * Here we indicate that the content module will handle
 * the default value and multiple values for these widgets.
 *
 * Callbacks can be omitted if default handing is used.
 * They're included here just so this module can be used
 * as an example for custom modules that might do things
 * differently.
 */
function property_addons_widget_info() {
  
  return array(
    'property_addons' => array(
      'label'           => 'Property Add-On Field',
      'field types'     => array('property_addons'),
      'multiple values' => CONTENT_HANDLE_CORE
    )
  );
  
}

/**
 * Implementation of hook_widget().
 *
 * Attach a single form element to the form. It will be built out and
 * validated in the callback(s) listed in hook_elements. We build it
 * out in the callbacks rather than here in hook_widget so it can be
 * plugged into any module that can provide it with valid
 * $field information.
 *
 * Content module will set the weight, field name and delta values
 * for each form element. This is a change from earlier CCK versions
 * where the widget managed its own multiple values.
 *
 * If there are multiple values for this field, the content module will
 * call this function as many times as needed.
 *
 * @param $form
 *   the entire form array, $form['#node'] holds node information
 * @param $form_state
 *   the form_state, $form_state['values'][$field['field_name']]
 *   holds the field's form values.
 * @param $field
 *   the field array
 * @param $items
 *   array of default values for this field
 * @param $delta
 *   the order of this item in the array of subelements (0, 1, 2, etc)
 *
 * @return
 *   the form item for a single element for this field
 */
function property_addons_widget( &$form, &$form_state, $field, $items, $delta = 0 ) {
  
  $element = array(
    '#type'          => $field['widget']['type'],
    '#default_value' => isset( $items[$delta] ) ? $items[$delta] : '',
    '#title'         => $field['widget']['label'],
    '#field'         => $field,
  );
  
  return $element;

}

/**
 * Process an individual element.
 *
 * Build the form element. When creating a form using FAPI #process,
 * note that $element['#value'] is already set.
 *
 * The $fields array is in $form['#field_info'][$element['#field_name']].
 */
function property_addons_process( $element, $edit, $form_state, $form ) {
  
  //krumo( $element );
  
  //Form CSS
  drupal_add_css( PROPERTY_ADDONS_MODULE_PATH . '/css/form.css' );
  
  //Property Is on Special/Promotion
  $element['property_is_on_promotion'] = array(
    '#type'          => 'checkbox',
    '#title'         => t('Yes, Place This Property On A Promotion.'),
    '#default_value' => isset( $element['#value']['property_is_on_promotion'] ) ? $element['#value']['property_is_on_promotion'] : $element['#field']['widget']['default_value'][0]['property_is_on_promotion'],
    '#attributes'    => array( 'class' => 'property-addons-is-on-promotion' )
  );
  
  $element['promotional_teaser'] = array(
    '#type'          => 'textfield',
    '#title'         => t('Promotional Teaser'),
    '#description'   => t('Please enter the Promotional Teaser for this property.'),
    '#default_value' => isset( $element['#value']['promotional_teaser'] ) ? $element['#value']['promotional_teaser'] : $element['#field']['widget']['default_value'][0]['promotional_teaser'],
    '#attributes'    => array( 'class' => 'property-addons-promotional-teaser' )
  );
  
  $element['promotional_details'] = array(
    '#type'          => 'textarea',
    '#title'         => t('Promotional Details'),
    '#description'   => t('Please enter the Promotional Teaser for this property.'),
    '#default_value' => isset( $element['#value']['promotional_details'] ) ? $element['#value']['promotional_details'] : $element['#field']['widget']['default_value'][0]['promotional_details'],
    '#attributes'    => array( 'class' => 'property-addons-promotional-details' )
  );
  
  //Property Is For Sale
  $element['property_is_for_sale'] = array(
    '#type'          => 'checkbox',
    '#title'         => t('Yes, List This Property As For Sale'),
    '#default_value' => isset( $element['#value']['property_is_for_sale'] ) ? $element['#value']['property_is_for_sale'] : $element['#field']['widget']['default_value'][0]['property_is_for_sale'],
    '#attributes'    => array( 'class' => 'property-addons-is-for-sale' )
  );
  
  //Property Is Featured
  $element['property_is_featured'] = array(
    '#type'          => 'checkbox',
    '#title'         => t('Feature This Property On !site_name!', array( '!site_name' => ucwords( variable_get( 'site_name', NULL ) ) ) ),
    '#default_value' => isset( $element['#value']['property_is_featured'] ) ? $element['#value']['property_is_featured'] : $element['#field']['widget']['default_value'][0]['property_is_featured'],
    '#attributes'    => array( 'class' => 'property-addons-is-featured' )
  );
  
  //Get price points from the values entered by the user and turn into a select list
  $options      = array( 'CHOOSE' => t( 'Choose your Option!' ) );
  $price_points = explode( "\r\n", $element['#field']['property_is_featured']['price_point'] );
  foreach ( $price_points as $price_point ) {
    
    $arr = explode( "|", $price_point );
    
    $key = trim( str_replace( ' ', '', $arr[0] ) );
    $options[$key] = t( '@value', array( '@value' => trim( $arr[1] ) ) ) ; 
    
  }
  
  //Get the default value, either the default you set, or the fall back default
  $default = ( isset($element['#field']['widget']['default_value'][0]['property_is_featured_price_point'] ) ) ? $element['#field']['widget']['default_value'][0]['property_is_featured_price_point'] : 'CHOOSE';
  
  $element['property_is_featured_price_point'] = array(
    '#type'          => 'radios',
    '#title'         => t('Choose Which Featured Property Option You Would Like To Use'),
    '#options'       => $options,
    '#default_value' => isset( $element['#value']['property_is_featured_price_point'] ) ? $element['#value']['property_is_featured_price_point'] : $default,
    '#attributes'    => array( 'class' => 'property-addons-is-featured-radios' )
  );
  
  return $element;

}